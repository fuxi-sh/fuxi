from abc import ABC
from typing import Dict, Tuple
from .market import Symbol
from .code import Codes
from .base import LogLevel, Volume
from .alias import Time

class Context(ABC):
    time: Time
    spot: Volume
    swap: Volume
    symbols: Dict[Codes, Symbol]

    FMT_MS: str
    FMT_MS_CPT: str
    FMT_S: str
    FMT_S_CPT: str

    def with_log_level(self, level: Tuple[LogLevel, LogLevel]): ...
    def trace(self, *args): ...
    def debug(self, *args): ...
    def info(self, *args): ...
    def warn(self, *args): ...
    def error(self, *args): ...
    def millis_to_time(self, millis: int) -> Time: ...
    def nanos_to_time(self, nanos: int) -> Time: ...
    def str_to_time(self, s: int) -> Time: ...
    def time_to_str(self, t: Time, fmt: str) -> Time: ...
    def new_id(self) -> str: ...
    def on_start(self): ...
    def on_stop(self): ...
    def on_tick(self): ...
    def on_position(self): ...
    def on_order(self): ...
    def on_cash(self): ...
