from abc import ABC, abstractmethod
from typing import Dict, List, Tuple
from .market import Candle, Symbol
from .code import Codes
from .base import LogLevel, Mode, Volume
from .alias import Time

class Context(ABC):
    mode: Mode
    time: Time
    spot: Volume
    swap: Volume
    symbols: Dict[Codes, Symbol]
    FMT_MS: str
    FMT_MS_CPT: str
    FMT_S: str
    FMT_S_CPT: str
    def __init__(self, log_level: Tuple[LogLevel, LogLevel] = (LogLevel.Info, LogLevel.Info)): ...
    @staticmethod
    def millis_to_time(millis: int) -> Time: ...
    @staticmethod
    def nanos_to_time(nanos: int) -> Time: ...
    @staticmethod
    def str_to_time(s: int) -> Time: ...
    @staticmethod
    def time_to_str(t: Time, fmt: str) -> Time: ...
    @staticmethod
    def new_id() -> str: ...
    def show_trace_log(self, *args): ...
    def show_debug_log(self, *args): ...
    def show_info_log(self, *args): ...
    def show_warn_log(self, *args): ...
    def show_error_log(self, *args): ...
    @abstractmethod
    def on_start(self): ...
    @abstractmethod
    def on_stop(self): ...
    @abstractmethod
    def on_history_tick(self, code: Codes, candles: List[Candle]): ...
    @abstractmethod
    def on_tick(self): ...
    @abstractmethod
    def on_position(self): ...
    @abstractmethod
    def on_order(self): ...
    @abstractmethod
    def on_cash(self): ...
